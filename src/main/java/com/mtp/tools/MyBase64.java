package com.mtp.tools;

import com.exadel.flamingo.flex.messaging.amf.io.AMF3Serializer;
import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
import com.sun.xml.internal.messaging.saaj.util.ByteOutputStream;

import java.io.DataOutputStream;
import java.io.IOException;

public class MyBase64 {
    /**
     * 测试数据
     * @author XiaoL
     */
    static public String TEST_DATA_A = "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";
    static public String TEST_DATA_B = "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";
    static public String TEST_DATA_C = "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";
    static public String TEST_DATA_D = "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";

    void Test(){
        String data = MyBase64.TEST_DATA_D;
        try {
            data = new String(decodeToByteArray(new String(decodeToByteArray(data).uncompress()).substring(3)).uncompress()).substring(4);
            System.out.println(data);
            //加密
            byte header_byte_array[] = new byte[]{11 ,-122 ,-93 ,43};
            ByteArray byteArray = new ByteArray();
            byteArray.write(header_byte_array);
            byteArray.write(data.getBytes());
            byte compress[] = byteArray.compress();
            byteArray = new ByteArray();
            header_byte_array = new byte[]{6 ,-11 ,121};
            byteArray.write(header_byte_array);
            byteArray.write(encodeByteArray(new ByteInputStream(compress,compress.length)).toByteArray());
            compress = byteArray.compress();
            System.out.println(encodeByteArray(new ByteInputStream(compress,compress.length)));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static ByteArray decodeToByteArray(String param) {
        int param_curr_pos = 0,char_curr_pos,temp_array_cur_pos;
        int[] char_array = new int[4];
        int[] temp_array = new int[3];
        ByteArray byteArray = new ByteArray();
        while (param_curr_pos < param.length()){
            char_curr_pos = 0;
            while (char_curr_pos < 4 && param_curr_pos + char_curr_pos < param.length()){
                // 将搜索到的字符位置赋值到数组
                char_array[char_curr_pos] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(param.charAt(param_curr_pos + char_curr_pos));
                char_curr_pos++;
            }
            temp_array[0] = (char_array[0] << 2) + ((char_array[1] & 48) >> 4);
            temp_array[1] = ((char_array[1] & 15) << 4) + ((char_array[2] & 60) >> 2);
            temp_array[2] = ((char_array[2] & 3) << 6) + char_array[3];
            temp_array_cur_pos = 0;
            while (temp_array_cur_pos < temp_array.length){
                if (char_array[temp_array_cur_pos + 1] == 64){
                    break;
                }
                byteArray.write(temp_array[temp_array_cur_pos]);
                temp_array_cur_pos++;
            }
            param_curr_pos+=4;
        }
        return byteArray;
    }

    public static ByteArray encodeByteArray(ByteInputStream param) throws IOException {
        ByteList byteList;
        int byteList_curr_pos;
        Integer[] temp_array = new Integer[4];
        int temp_array_cur_pos;
        StringBuilder temp_string = new StringBuilder();
        int temp_string_cur_pos;
        while (param.available() > 0){
            byteList = new ByteList();
            byteList_curr_pos = 0;
            while (byteList_curr_pos < 3 && param.available() > 0){
                byteList.add(byteList_curr_pos,param.read());
                byteList_curr_pos++;
            }
            temp_array[0] = (byteList.get(0) & 252) >> 2;
            temp_array[1] = (byteList.get(0) & 3) << 4 | byteList.get(1) >> 4;
            temp_array[2] = (byteList.get(1) & 15) << 2 | byteList.get(2) >> 6;
            temp_array[3] = byteList.get(2) & 63;
            temp_array_cur_pos = byteList.size();
            while (temp_array_cur_pos < 3){
                temp_array[temp_array_cur_pos + 1] = 64;
                temp_array_cur_pos++;
            }
            temp_string_cur_pos = 0;
            while (temp_string_cur_pos < temp_array.length){
                temp_string.append("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(temp_array[temp_string_cur_pos]));
                temp_string_cur_pos++;
            }
        }
        final String finalTemp_string = temp_string.toString();
        return new ByteArray(){{
            write(finalTemp_string.getBytes());
        }};
    }

    //System.arraycopy()方法
    public static byte[] byteMerger(byte[] bt1, byte[] bt2){
        byte[] bt3 = new byte[bt1.length+bt2.length];
        System.arraycopy(bt1, 0, bt3, 0, bt1.length);
        System.arraycopy(bt2, 0, bt3, bt1.length, bt2.length);
        return bt3;
    }

    public static void AMF3Serializer(Object object,ByteArray byteArray) throws IOException {
        ByteOutputStream byteOutputStream = new ByteOutputStream();
        DataOutputStream dataOutputStream = new DataOutputStream(byteOutputStream);
        AMF3Serializer amf3Serializer = new AMF3Serializer(dataOutputStream);
        amf3Serializer.writeObject(object);
        byteOutputStream.writeTo(byteArray);
    }

    public static void setAMF3Header(ByteArray byteArray,byte value) throws IOException {
        byte[] header_byte_array = byteArray.toByteArray();
        header_byte_array[0] = value;
        byteArray.reset();
        byteArray.write(header_byte_array);
    }
}
